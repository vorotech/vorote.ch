name: Deploy on Release

on:
  release:
    types: [ "created" ]

permissions:
  id-token: write
  contents: read

jobs:
  install:
    name: Install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache npm
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys:
            npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
            npm-${{ runner.os }}-

      - name: Cache modules
        id: npm-modules-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: npm-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys:
            npm-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
            npm-modules-${{ runner.os }}-

      - name: Install modules
        if: steps.npm-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Confiugre AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Checkout
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
            node-version: 18

      - name: Restore modules
        id: npm-modules-cache
        uses: actions/cache/restore@v3
        with:
            path: node_modules
            key: npm-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Install modules
        if: steps.npm-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run deploy
        env:
          BLOG_S3_BUCKET: ${{ secrets.BLOG_S3_BUCKET }}
          BLOG_HOSTNAME: ${{ secrets.BLOG_HOSTNAME }}
        run: npm run deploy
